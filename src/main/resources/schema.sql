DROP TABLE IF EXISTS users cascade;
DROP TABLE IF EXISTS item_requests cascade;
DROP TABLE IF EXISTS items cascade;
DROP TABLE IF EXISTS bookings cascade;
DROP TABLE IF EXISTS comments cascade;

CREATE TABLE IF NOT EXISTS users (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(512) NOT NULL,
    CONSTRAINT pk_user PRIMARY KEY (id),
    CONSTRAINT UQ_USER_EMAIL UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS item_requests (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    description VARCHAR(1024) NOT NULL,
    requestor_id INTEGER,
    created TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    CONSTRAINT pk_item_requests PRIMARY KEY (id),
    CONSTRAINT fk_requestor_item_requests FOREIGN KEY (requestor_id) REFERENCES users(id)
);

CREATE TABLE IF NOT EXISTS items (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name VARCHAR(255) NOT NULL,
    description VARCHAR(1024) NOT NULL,
    available BOOLEAN NOT NULL,
    owner_id INTEGER,
    request_id INTEGER,
    CONSTRAINT pk_item PRIMARY KEY (id),
    CONSTRAINT fk_owner_items FOREIGN KEY (owner_id) REFERENCES users(id),
    CONSTRAINT fk_request_items FOREIGN KEY (request_id) REFERENCES item_requests(id)
);

CREATE TABLE IF NOT EXISTS bookings (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    start_date TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    end_date TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    item_id INTEGER NOT NULL,
    booker_id INTEGER NOT NULL,
    status VARCHAR(10) NOT NULL,
    CONSTRAINT pk_bookings PRIMARY KEY (id),
    CONSTRAINT fk_item_bookings FOREIGN KEY (item_id) REFERENCES items(id),
    CONSTRAINT fk_booker_bookings FOREIGN KEY (booker_id) REFERENCES users(id)
);

CREATE TABLE IF NOT EXISTS comments (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    text VARCHAR(250) NOT NULL,
    item_id INTEGER NOT NULL,
    author_id INTEGER NOT NULL,
    created TIMESTAMP WITHOUT TIME ZONE,
    CONSTRAINT pk_comments PRIMARY KEY (id),
    CONSTRAINT fk_item_comments FOREIGN KEY (item_id) REFERENCES items(id),
    CONSTRAINT fk_author_comments FOREIGN KEY (author_id) REFERENCES users(id)
);